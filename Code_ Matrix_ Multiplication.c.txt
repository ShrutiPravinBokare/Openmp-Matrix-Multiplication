
#### **Code (matrix_multiplication.c)**

```c
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define MAX 1000

void matrixMultiplication(int n, int A[MAX][MAX], int B[MAX][MAX], int C[MAX][MAX]) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = 0;
            for (int k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Usage: %s <matrix_size>\n", argv[0]);
        return -1;
    }

    int n = atoi(argv[1]);
    int A[MAX][MAX], B[MAX][MAX], C[MAX][MAX];

    // Initialize matrices A and B with random values
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            A[i][j] = rand() % 100;
            B[i][j] = rand() % 100;
        }
    }

    double start_time = omp_get_wtime();
    matrixMultiplication(n, A, B, C);
    double end_time = omp_get_wtime();

    printf("Matrix multiplication completed in %f seconds.\n", end_time - start_time);
    return 0;
}
